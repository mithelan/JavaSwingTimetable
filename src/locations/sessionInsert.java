/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package locations;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author narth
 */
public class sessionInsert extends javax.swing.JFrame {

    /**
     * Creates new form sessionInsert
     */
    public sessionInsert() {
        initComponents();
        DisplayTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        session_table = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        session = new javax.swing.JTextField();
        session_room = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        result_text = new javax.swing.JLabel();
        all_buildings = new javax.swing.JComboBox<>();
        by_building = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Add location to sessions");

        session_table.setBackground(new java.awt.Color(153, 255, 51));
        session_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Session ID", "Lecture", "Tag", "Group", "Sub Group"
            }
        ));
        session_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                session_tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(session_table);

        jLabel2.setText("Session ID");

        session.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sessionActionPerformed(evt);
            }
        });

        jLabel3.setText("Rooms");

        result_text.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        result_text.setForeground(new java.awt.Color(255, 0, 0));

        all_buildings.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                all_buildingsItemStateChanged(evt);
            }
        });
        all_buildings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                all_buildingsActionPerformed(evt);
            }
        });
        all_buildings.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                all_buildingsPropertyChange(evt);
            }
        });

        by_building.setText("FILTER BY BUILDINGS");
        by_building.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                by_buildingActionPerformed(evt);
            }
        });

        jButton1.setText("Allocate Room");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(254, 254, 254)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(session, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(session_room, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(by_building)
                                .addGap(26, 26, 26)
                                .addComponent(all_buildings, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(278, 278, 278)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 160, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addComponent(result_text, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(session, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(session_room, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(by_building)
                    .addComponent(all_buildings, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(result_text, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(113, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sessionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sessionActionPerformed

    private void session_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_session_tableMouseClicked
        // TODO add your handling code here:
       result_text.setText("");
        try {
            Class.forName("com.mysql.jdbc.Driver");
           Connection conn=DriverManager.getConnection("jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12369942","sql12369942","5g6lr3KRxN");

            TableModel model = session_table.getModel();
            int i = session_table.getSelectedRow();
            int column = session_table.getSelectedColumn();
           
            //to get the session id
            String sql="SELECT * FROM session WHERE id = "+model.getValueAt(i,0);
            PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();
            
            String all_lectures = model.getValueAt(i,1).toString();
            System.out.println(all_lectures);
            String lectures[] = all_lectures.split(",");
            
            System.out.println(lectures[0]);
            
            
            
            //to get the rooms according to lectures
            String sql2="SELECT * FROM special_room_lectures WHERE lecture = + '"+lectures[0]+"'";
            PreparedStatement pstmt2 = (PreparedStatement) conn.prepareStatement(sql2);
            ResultSet rs2 = pstmt2.executeQuery();
            
//            to get the rooms according to tags
            String sql3="SELECT * FROM rooms";
            PreparedStatement pstmt3 = (PreparedStatement) conn.prepareStatement(sql3);
            ResultSet rs3 = pstmt3.executeQuery();

            
            session_room.removeAllItems();
                         
            while(rs.next())
            {                              
                session.setText(rs.getString("id"));  
            }
            
            int x = 0;
            if(column == 1) {
               
               System.out.println("Lecture");
                while(rs2.next())
                {      
                     x++;
                    session_room.addItem(rs2.getString("room"));              
                }
                
                if(x > 0) {
                result_text.setText("Sepcial rooms for lecturer available");
                } else {
                    result_text.setText("");
                }
                
                all_buildings.setVisible(false);
                
            }
            
                      
            int y = 0;
            if(column == 2) {
                  String click_pannathu = model.getValueAt(i,column).toString();
                  System.out.println(click_pannathu + " than saaman");
                  
                  if(click_pannathu.equals("Lecture") || click_pannathu.equals("Tutorial") ) {
                      System.out.println("Lecutre");
                      
                      String sql4="SELECT * FROM rooms where room_type = 'Lecture Hall'";
                      PreparedStatement pstmt4 = (PreparedStatement) conn.prepareStatement(sql4);
                      ResultSet rs4 = pstmt4.executeQuery();
                      
                        while(rs4.next())
                        {      
                            y++;
                           session_room.addItem(rs4.getString("room_name"));              
                        }
                  } else {
                      
                      String sql4="SELECT * FROM rooms where room_type != 'Lecture Hall'";
                      PreparedStatement pstmt4 = (PreparedStatement) conn.prepareStatement(sql4);
                      ResultSet rs4 = pstmt4.executeQuery();
                      
                    while(rs4.next())
                    {      
                        y++;
                        session_room.addItem(rs4.getString("room_name"));              
                    }
                  }   
                  
                  if(y > 0) {
                    result_text.setText("Sepcial rooms for tags available");
                  } else {
                    result_text.setText("");
                  }
                  
                  all_buildings.setVisible(false);
            }
            
            
            
            int z = 0;
            if(column == 3) {
                String click_pannathu = model.getValueAt(i,column).toString();
                System.out.println(click_pannathu);
                
                String sql5="SELECT * FROM special_room_groups where group_room = '"+click_pannathu+"'";
                PreparedStatement pstmt5 = (PreparedStatement) conn.prepareStatement(sql5);
                ResultSet rs5 = pstmt5.executeQuery();
                
                while(rs5.next())
                {      
                    z++;
                    session_room.addItem(rs5.getString("room"));              
                }
                
                if(z > 0) {
                    result_text.setText("Sepcial rooms for groups available");
                } else {
                    result_text.setText("");
                }   
                
                all_buildings.setVisible(false);
            }
                
            if(column == 4) {
                String sql5="SELECT * FROM rooms where room_type = 'Laboratory'";
                PreparedStatement pstmt5 = (PreparedStatement) conn.prepareStatement(sql5);
                ResultSet rs5 = pstmt5.executeQuery();
                
                while(rs5.next())
                {      
                    session_room.addItem(rs5.getString("room_name"));              
                }
                
                all_buildings.setVisible(false);
            }
            
           
            
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }  
    }//GEN-LAST:event_session_tableMouseClicked

    private void by_buildingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_by_buildingActionPerformed
        // TODO add your handling code here:
        all_buildings.setVisible(true);
        all_buildings.removeAllItems();
        dropBuildings();
             
       
    }//GEN-LAST:event_by_buildingActionPerformed

    private void all_buildingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_all_buildingsActionPerformed
        // TODO add your handling code here:
     
        String building;
        
        building = all_buildings.getSelectedItem().toString();
       
             
        try {
            Class.forName("com.mysql.jdbc.Driver");
           Connection conn=DriverManager.getConnection("jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12369942","sql12369942","5g6lr3KRxN");
            
           
            String sql = "select * from rooms where building_name = '"+building+"'";
            PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();
           
            
            while(rs.next())
            {
                session_room.addItem(rs.getString("room_name"));
            }
             
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_all_buildingsActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.out.println("Ipa add aga poguthu");
        try {
            Class.forName("com.mysql.jdbc.Driver");
           Connection conn=DriverManager.getConnection("jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12369942","sql12369942","5g6lr3KRxN");
            String room;
            room = session_room.getSelectedItem().toString();
            String id_string = session.getText();
            int id = Integer.parseInt(id_string);
            System.out.println(id);
            System.out.println(room);
            String sql = "update session set location = '"+room+"' where id = '"+id+"' ";
            PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
            pstmt.execute();
                      
            DisplayTable();
             
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void all_buildingsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_all_buildingsPropertyChange
        // TODO add your handling code here:
       
    }//GEN-LAST:event_all_buildingsPropertyChange

    private void all_buildingsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_all_buildingsItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_all_buildingsItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sessionInsert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sessionInsert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sessionInsert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sessionInsert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new sessionInsert().setVisible(true);
            }
        });
    }
    
    
    
    private void DisplayTable()
    {
        all_buildings.setVisible(false);
        try {
            Class.forName("com.mysql.jdbc.Driver");
           Connection conn=DriverManager.getConnection("jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12369942","sql12369942","5g6lr3KRxN");
            
            int x = 0;
            String sql = "select * from session where location is null";
//            String sql = "SELECT * FROM rooms where building_name = '"+building+"'";
            PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();
            DefaultTableModel building_table = (DefaultTableModel) session_table.getModel();
            building_table.setRowCount(0);
            
            while(rs.next())
            {
                Object o[] = {rs.getString("id"), rs.getString("lecturer1"), rs.getString("tag"), rs.getString("studentGroup"), rs.getString("subgroup")};
                building_table.addRow(o);
            }
             
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private void dropBuildings() {
       
        try {
            Class.forName("com.mysql.jdbc.Driver");
           Connection conn=DriverManager.getConnection("jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12369942","sql12369942","5g6lr3KRxN");
            
            String sql = "select * from buildings";
            PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();
           
            while(rs.next())
            {
                all_buildings.addItem(rs.getString("building_name"));
            }
             
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> all_buildings;
    private javax.swing.JButton by_building;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel result_text;
    private javax.swing.JTextField session;
    private javax.swing.JComboBox<String> session_room;
    private javax.swing.JTable session_table;
    // End of variables declaration//GEN-END:variables
}
