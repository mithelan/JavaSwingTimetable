/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package locations;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import javax.swing.JOptionPane;

//my imports
import java.time.format.DateTimeFormatter;  
import java.time.LocalDateTime;    
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import javax.swing.JPanel;

/**
 *
 * @author narth
 */
public class LocationInsert extends javax.swing.JFrame {

    /**
     * Creates new form LocationInsert
     */
    public LocationInsert() {
        initComponents();
        DisplayTable();
        buildingDrop();
        DisplayTableRooms();
//        try{
//            Class.forName("com.mysql.jdbc.Driver");
//            Connection conn=DriverManager.getConnection("jdbc:mysql://localhost:3306/spm","root","");
//            String sql = "SELECT * FROM buildings";
//            PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
//            ResultSet rs = pstmt.executeQuery();
//            
//            while(rs.next())
//            {
//             
//                room_building.addItem(rs.getString("building_name"));
//            }
//        }
//        catch(Exception e){
//            JOptionPane.showMessageDialog(null,e);
//        } 
       
//        building_dropdown.addItem("Narthanan");
//        building_dropdown.addItem("Priyanha");
//        building_dropdown.addItem("Vera Level");
    }
    
    
    private void buildingDrop() 
    {
//        room_building.removeAllItems();
        try{
            Class.forName("com.mysql.jdbc.Driver");
           Connection conn=DriverManager.getConnection("jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12369942","sql12369942","5g6lr3KRxN");
            String sql = "SELECT * FROM buildings";
            PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();
           
            while(rs.next())
            {
                room_building.addItem(rs.getString("building_name"));             
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }      
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        building_name = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        no_of_floors = new javax.swing.JTextField();
        common_search = new javax.swing.JTextField();
        search_btn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        buildings_table = new javax.swing.JTable();
        delete_building = new javax.swing.JTextField();
        delete_building_btn = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        room_building = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        floor_limit = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        time_slot = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        room_type = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        rooms_table = new javax.swing.JTable();
        addRoom = new javax.swing.JButton();
        generated_name = new javax.swing.JTextField();
        addRoom1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        room_del_id = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Building Name");

        jButton1.setBackground(new java.awt.Color(0, 102, 204));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("ADD");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Number of Floors");

        no_of_floors.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                no_of_floorsKeyPressed(evt);
            }
        });

        common_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                common_searchActionPerformed(evt);
            }
        });
        common_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                common_searchKeyReleased(evt);
            }
        });

        search_btn.setBackground(new java.awt.Color(0, 102, 204));
        search_btn.setForeground(new java.awt.Color(255, 255, 255));
        search_btn.setText("SEARCH");
        search_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_btnActionPerformed(evt);
            }
        });

        buildings_table.setBackground(new java.awt.Color(153, 255, 0));
        buildings_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Building Name", "Number of Floors", "Added On"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        buildings_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buildings_tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(buildings_table);

        delete_building.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_buildingActionPerformed(evt);
            }
        });

        delete_building_btn.setBackground(new java.awt.Color(204, 0, 0));
        delete_building_btn.setForeground(new java.awt.Color(255, 255, 255));
        delete_building_btn.setText("DELETE ");
        delete_building_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_building_btnActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 102, 204));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("UPDATE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextField1.setText("ADD BUILDING");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextField2.setText("ADD ROOM");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Building Name");

        room_building.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                room_buildingActionPerformed(evt);
            }
        });

        jLabel4.setText("Floor Number");

        floor_limit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                floor_limitActionPerformed(evt);
            }
        });

        jLabel5.setText("Room Type");

        time_slot.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8.30 - 9.30 AM", "9.30 - 10.30 AM", "10.30 - 11.30 AM", "11.30- 12.30 PM", "12.30 - 1.30 PM", "1.30 - 2.30 PM", "2.30 - 3.30 PM", "3.30-4.30 PM", "3.30-4.30 PM", "4.30-5.30 PM", "5.30-6.30 PM", "6.30-7.30 PM", "7.30-8.30 PM" }));
        time_slot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                time_slotActionPerformed(evt);
            }
        });

        jLabel6.setText("Non-Available Time Slot");

        room_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lecture Hall", "Laboratory", " " }));
        room_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                room_typeActionPerformed(evt);
            }
        });

        rooms_table.setBackground(new java.awt.Color(153, 255, 0));
        rooms_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room ID", "Room Name", "Building Name", "Room Type", "Non Available Time", "Added On"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        rooms_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rooms_tableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(rooms_table);

        addRoom.setBackground(new java.awt.Color(0, 102, 204));
        addRoom.setForeground(new java.awt.Color(255, 255, 255));
        addRoom.setText("ADD");
        addRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomActionPerformed(evt);
            }
        });

        addRoom1.setBackground(new java.awt.Color(0, 102, 204));
        addRoom1.setForeground(new java.awt.Color(255, 255, 255));
        addRoom1.setText("Generate Name");
        addRoom1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoom1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Enter room id to delete");

        room_del_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                room_del_idActionPerformed(evt);
            }
        });
        room_del_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                room_del_idKeyPressed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 0, 0));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(building_name, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                            .addComponent(no_of_floors))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(common_search, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                            .addComponent(delete_building))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(delete_building_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(search_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(83, 83, 83))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(243, 243, 243)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 13, Short.MAX_VALUE)
                                        .addComponent(addRoom1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(room_building, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(floor_limit, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(generated_name, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 205, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel6)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addComponent(jLabel5)
                                                    .addGap(39, 39, 39)))
                                            .addComponent(jLabel7))
                                        .addGap(73, 73, 73)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(room_type, 0, 191, Short.MAX_VALUE)
                                            .addComponent(time_slot, 0, 191, Short.MAX_VALUE)
                                            .addComponent(room_del_id)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(303, 303, 303)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(addRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(46, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(building_name, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(no_of_floors, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(common_search)
                            .addComponent(search_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(delete_building, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(delete_building_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(room_building, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(floor_limit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(generated_name, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addRoom1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(room_type, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(time_slot, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(room_del_id, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
        LocalDateTime now = LocalDateTime.now();  
        String s = dtf.format(now);
        System.out.println(s);
        
        String building = building_name.getText();
        
   
        if(building.isEmpty()) {
            JOptionPane.showMessageDialog(null,"Please enter a building name");
        } else {
            try{

                Class.forName("com.mysql.jdbc.Driver");
               Connection conn=DriverManager.getConnection("jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12369942","sql12369942","5g6lr3KRxN");
                String query="INSERT INTO buildings (building_name, no_of_floors, created) VALUES('"+building_name.getText()+"',"+no_of_floors.getText()+", '"+s+"')";
                Statement st=conn.createStatement();
                st.executeUpdate(query);
                room_building.addItem(building_name.getText());
                DisplayTable();  
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null,e);
            } 
        }
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void DisplayTable()
    {
        try {
            Class.forName("com.mysql.jdbc.Driver");
           Connection conn=DriverManager.getConnection("jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12369942","sql12369942","5g6lr3KRxN");
            String sql = "select * from buildings";
            PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();
            DefaultTableModel building_table = (DefaultTableModel) buildings_table.getModel();
            building_table.setRowCount(0);
            
            while(rs.next())
            {
                Object o[] = {rs.getString("id"),rs.getString("building_name"), rs.getString("no_of_floors"), rs.getString("created")};
                building_table.addRow(o);
            }
//            buildings_table.setModel(DbUtils.resultSetToTableModel(rs));
            
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private void DisplayTableRooms()
    {
        try {
            Class.forName("com.mysql.jdbc.Driver");
           Connection conn=DriverManager.getConnection("jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12369942","sql12369942","5g6lr3KRxN");
            String sql = "select * from rooms";
            PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();
            DefaultTableModel roomso = (DefaultTableModel) rooms_table.getModel();
            roomso.setRowCount(0);
            
            while(rs.next())
            {
                Object o[] = {rs.getString("id"),rs.getString("room_name"),rs.getString("building_name"), rs.getString("room_type"),rs.getString("non_available_time"), rs.getString("created")};
                roomso.addRow(o);
            }
//            buildings_table.setModel(DbUtils.resultSetToTableModel(rs));
            
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private void search_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_btnActionPerformed
        // TODO add your handling code here:
         
        try {
            String search_word = common_search.getText();
            System.out.println(search_word);
            int word_length = search_word.length();
            if(word_length > 0) {
                Class.forName("com.mysql.jdbc.Driver");
               Connection conn=DriverManager.getConnection("jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12369942","sql12369942","5g6lr3KRxN");
                String sql = "SELECT * FROM buildings where building_name = '"+search_word+"' ";
                PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
                ResultSet rs = pstmt.executeQuery();
                DefaultTableModel building_table = (DefaultTableModel) buildings_table.getModel();
                building_table.setRowCount(0);

                while(rs.next())
                {
                    Object o[] = {rs.getString("id"),rs.getString("building_name"), rs.getString("no_of_floors"), rs.getString("created")};
                    building_table.addRow(o);
                }
                
                
                String sql2 = "SELECT * FROM rooms where building_name = '"+search_word+"' ";
                PreparedStatement pstmt2 = (PreparedStatement) conn.prepareStatement(sql2);
                ResultSet rs2 = pstmt2.executeQuery();
                DefaultTableModel rooms_tablee = (DefaultTableModel) rooms_table.getModel();
                rooms_tablee.setRowCount(0);

                while(rs2.next())
                {
                    Object o[] = {rs2.getString("id"),rs2.getString("room_name"),rs2.getString("building_name"),rs2.getString("room_type"), rs2.getString("non_available_time"), rs2.getString("created")};
                    rooms_tablee.addRow(o);
                }
            } else {
                System.out.println("Yes this is workinh");
                Class.forName("com.mysql.jdbc.Driver");
               Connection conn=DriverManager.getConnection("jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12369942","sql12369942","5g6lr3KRxN");
                String sql = "SELECT * FROM buildings";
                PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
                ResultSet rs = pstmt.executeQuery();
                DefaultTableModel building_table = (DefaultTableModel) buildings_table.getModel();
                building_table.setRowCount(0);

                while(rs.next())
                {
                    Object o[] = {rs.getString("id"),rs.getString("building_name"), rs.getString("no_of_floors"), rs.getString("created")};
                    building_table.addRow(o);
                }
                
                String sql2 = "SELECT * FROM rooms";
                PreparedStatement pstmt2 = (PreparedStatement) conn.prepareStatement(sql2);
                ResultSet rs2 = pstmt2.executeQuery();
                DefaultTableModel rooms_tablee = (DefaultTableModel) rooms_table.getModel();
                rooms_tablee.setRowCount(0);

                while(rs2.next())
                {
                    Object o[] = {rs2.getString("id"),rs2.getString("room_name"),rs2.getString("building_name"),rs2.getString("room_type"), rs2.getString("non_available_time"), rs2.getString("created")};
                    rooms_tablee.addRow(o);
                }
                
                
            }
//            buildings_table.setModel(DbUtils.resultSetToTableModel(rs));
            
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_search_btnActionPerformed

    private void delete_buildingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_buildingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_delete_buildingActionPerformed

    private void delete_building_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_building_btnActionPerformed
        // TODO add your handling code here:
        try{
        
        Class.forName("com.mysql.jdbc.Driver");
       Connection conn=DriverManager.getConnection("jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12369942","sql12369942","5g6lr3KRxN");
        String query="DELETE FROM buildings WHERE id = "+delete_building.getText();
        Statement st=conn.createStatement();
        st.executeUpdate(query);
        DisplayTable();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }  
    }//GEN-LAST:event_delete_building_btnActionPerformed
    int common_id = 0;
    private void buildings_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buildings_tableMouseClicked
        // TODO add your handling code here:
        try {
            Class.forName("com.mysql.jdbc.Driver");
           Connection conn=DriverManager.getConnection("jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12369942","sql12369942","5g6lr3KRxN");

            TableModel model = buildings_table.getModel();
            int i = buildings_table.getSelectedRow();
            System.out.println(model.getValueAt(i,0));
            String sql="SELECT * FROM buildings WHERE id = "+model.getValueAt(i,0);
            PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();
            
            while(rs.next())
            {
                System.out.println(rs.getString("building_name"));
                building_name.setText(rs.getString("building_name"));
                no_of_floors.setText(rs.getString("no_of_floors"));
                common_id = rs.getInt("id");
                
            }
            
            DisplayTable();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }  
        
    }//GEN-LAST:event_buildings_tableMouseClicked

    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String building = building_name.getText();
        String floors = no_of_floors.getText();
        
        System.out.println(building);
        System.out.println(floors);
        
        try {
            Class.forName("com.mysql.jdbc.Driver");
           Connection conn=DriverManager.getConnection("jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12369942","sql12369942","5g6lr3KRxN");
            String sql = "UPDATE buildings set building_name = '"+building+"', no_of_floors = "+floors+" where id = "+common_id;
            PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
            pstmt.execute();
            DisplayTable();
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void room_buildingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_room_buildingActionPerformed
        // TODO add your handling code here:
        String sem;
        sem = room_building.getSelectedItem().toString();
        
        try {
            Class.forName("com.mysql.jdbc.Driver");
           Connection conn=DriverManager.getConnection("jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12369942","sql12369942","5g6lr3KRxN");
            
            String sql="SELECT * FROM buildings where building_name = '"+sem+"' ";
            PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();
            
            while(rs.next())
            {
                String no_of = "";
                no_of = rs.getString("no_of_floors");
                int number_of = 0;
                number_of = Integer.parseInt(no_of);
                
                floor_limit.removeAllItems();
                for(int i=1; i <= number_of; i++) {
                    String s = "";
                    s = Integer.toString(i);
                    floor_limit.addItem(s);
                }
                 
            }
            
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }  
        
    }//GEN-LAST:event_room_buildingActionPerformed

    private void floor_limitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_floor_limitActionPerformed
        // TODO add your handling code here:
      
        
        
    }//GEN-LAST:event_floor_limitActionPerformed

    private void time_slotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_time_slotActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_time_slotActionPerformed

    private void room_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_room_typeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_room_typeActionPerformed

    private void rooms_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rooms_tableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_rooms_tableMouseClicked

    private void addRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
        LocalDateTime now = LocalDateTime.now();  
        String s = dtf.format(now);
        System.out.println(s);
        
        try{
            String building;
            building = room_building.getSelectedItem().toString();
            
            String floor;
            floor = floor_limit.getSelectedItem().toString();
            
            String type;
            type = room_type.getSelectedItem().toString();
            
            String time;
            time = time_slot.getSelectedItem().toString();
            
            String room_name;
            room_name = generated_name.getText();
        
            Class.forName("com.mysql.jdbc.Driver");
           Connection conn=DriverManager.getConnection("jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12369942","sql12369942","5g6lr3KRxN");
            String query="INSERT INTO rooms (building_name,room_name,  room_type, non_available_time, created) VALUES('"+building+"','"+room_name+"','"+type+"','"+time+"','"+s+"')";
            Statement st=conn.createStatement();
            st.executeUpdate(query);
            DisplayTableRooms();
            
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }   
    }//GEN-LAST:event_addRoomActionPerformed

    private void addRoom1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoom1ActionPerformed
        // TODO add your handling code here:
        String building;
        building = room_building.getSelectedItem().toString();
        
        String floor;
        floor = floor_limit.getSelectedItem().toString();
        
       
        
        String splitter[] = building.split("\\s+");
//        System.out.println(splitter.length);
        System.out.println(splitter.length);
        String room_name = "";
        if(splitter.length == 1){
            
            room_name = splitter[0].charAt(0) + "" + floor;
            System.out.println(room_name);
        }else if(splitter.length == 2){
            char b_code1 = splitter[0].charAt(0);
            char b_code2 = splitter[1].charAt(0);
            
            room_name = b_code1 + "" + b_code2+ "" + floor;
            System.out.println(room_name);
        } else {
            char b_code1 = splitter[0].charAt(0);
            char b_code2 = splitter[1].charAt(0);
            char b_code3 = splitter[2].charAt(0);
            
            room_name = b_code1 + "" + b_code2+ "" + b_code3 + floor;
            System.out.println(room_name);
        }
        
        generated_name.setText(room_name);                    
    }//GEN-LAST:event_addRoom1ActionPerformed

    private void common_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_common_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_common_searchActionPerformed

    private void common_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_common_searchKeyReleased
           // TODO add your handling code here:
           System.out.println(common_search.getText());
           // TODO add your handling code here:
         
        try {
            String search_word = common_search.getText();
            System.out.println(search_word);
            int word_length = search_word.length();
            if(word_length > 0) {
                Class.forName("com.mysql.jdbc.Driver");
               Connection conn=DriverManager.getConnection("jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12369942","sql12369942","5g6lr3KRxN");
                String sql = "SELECT * FROM buildings where building_name LIKE '"+search_word+"%' ";
                PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
                ResultSet rs = pstmt.executeQuery();
                DefaultTableModel building_table = (DefaultTableModel) buildings_table.getModel();
                building_table.setRowCount(0);

                while(rs.next())
                {
                    Object o[] = {rs.getString("id"),rs.getString("building_name"), rs.getString("no_of_floors"), rs.getString("created")};
                    building_table.addRow(o);
                }
                
                
                String sql2 = "SELECT * FROM rooms where building_name LIKE '"+search_word+"%' ";
                PreparedStatement pstmt2 = (PreparedStatement) conn.prepareStatement(sql2);
                ResultSet rs2 = pstmt2.executeQuery();
                DefaultTableModel rooms_tablee = (DefaultTableModel) rooms_table.getModel();
                rooms_tablee.setRowCount(0);

                while(rs2.next())
                {
                    Object o[] = {rs2.getString("id"),rs2.getString("room_name"),rs2.getString("building_name"),rs2.getString("room_type"), rs2.getString("non_available_time"), rs2.getString("created")};
                    rooms_tablee.addRow(o);
                }
            } else {
                System.out.println("Yes this is workinh");
                Class.forName("com.mysql.jdbc.Driver");
               Connection conn=DriverManager.getConnection("jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12369942","sql12369942","5g6lr3KRxN");
                String sql = "SELECT * FROM buildings";
                PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
                ResultSet rs = pstmt.executeQuery();
                DefaultTableModel building_table = (DefaultTableModel) buildings_table.getModel();
                building_table.setRowCount(0);

                while(rs.next())
                {
                    Object o[] = {rs.getString("id"),rs.getString("building_name"), rs.getString("no_of_floors"), rs.getString("created")};
                    building_table.addRow(o);
                }
                
                String sql2 = "SELECT * FROM rooms";
                PreparedStatement pstmt2 = (PreparedStatement) conn.prepareStatement(sql2);
                ResultSet rs2 = pstmt2.executeQuery();
                DefaultTableModel rooms_tablee = (DefaultTableModel) rooms_table.getModel();
                rooms_tablee.setRowCount(0);

                while(rs2.next())
                {
                    Object o[] = {rs2.getString("id"),rs2.getString("room_name"),rs2.getString("building_name"),rs2.getString("room_type"), rs2.getString("non_available_time"), rs2.getString("created")};
                    rooms_tablee.addRow(o);
                }
                
                
            }
//            buildings_table.setModel(DbUtils.resultSetToTableModel(rs));
            
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_common_searchKeyReleased

    private void room_del_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_room_del_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_room_del_idActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        System.out.println(room_del_id.getText());
        try {
            Class.forName("com.mysql.jdbc.Driver");
               Connection conn=DriverManager.getConnection("jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12369942","sql12369942","5g6lr3KRxN");
                String sql = "delete from rooms where id = '"+room_del_id.getText()+"'";
                PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
                pstmt.executeUpdate(sql);
//                JOptionPane.showMessageDialog(null, "Room with id " + room_del_id + " deleted");
                
                DisplayTableRooms();
                
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, "Invalid room id");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void no_of_floorsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_no_of_floorsKeyPressed
        // TODO add your handling code here:
        
            char c=evt.getKeyChar();
            if(Character.isLetter(c)){

                no_of_floors.setEditable(false);

            }else{
                no_of_floors.setEditable(true);
            }
    }//GEN-LAST:event_no_of_floorsKeyPressed

    private void room_del_idKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_room_del_idKeyPressed
        // TODO add your handling code here:
         char c=evt.getKeyChar();
            if(Character.isLetter(c)){

                room_del_id.setEditable(false);

            }else{
                room_del_id.setEditable(true);
            }
    }//GEN-LAST:event_room_del_idKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LocationInsert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LocationInsert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LocationInsert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LocationInsert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LocationInsert().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRoom;
    private javax.swing.JButton addRoom1;
    private javax.swing.JTextField building_name;
    private javax.swing.JTable buildings_table;
    private javax.swing.JTextField common_search;
    private javax.swing.JTextField delete_building;
    private javax.swing.JButton delete_building_btn;
    private javax.swing.JComboBox<String> floor_limit;
    private javax.swing.JTextField generated_name;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField no_of_floors;
    private javax.swing.JComboBox<String> room_building;
    private javax.swing.JTextField room_del_id;
    private javax.swing.JComboBox<String> room_type;
    private javax.swing.JTable rooms_table;
    private javax.swing.JButton search_btn;
    private javax.swing.JComboBox<String> time_slot;
    // End of variables declaration//GEN-END:variables
}
